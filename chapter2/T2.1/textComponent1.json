{
  "id": null,
  "numberOfColumns": 8,
  "offsetColumns": 2,
  "renderOrder": 1,
  "showInNotebook": false,
  "showInNotebookAt": null,
  "page": null,
  "markdownContent": "On this page we're going to talk about **pageTransitions**. If you've come this far into the tutorial and played the other games you've already encountered multiple **pageTransitions**. They connect one page folder with another by telling *Marugoto* where to send the player next. For this reason, the *to* variable in the `pageTransition.json` will always define the destination `page.json` file. But what the player sees is simply a button at the bottom of the page: you can define the text in this button by filling in the variable *buttonText*. For the button you see below, look at the relevant `pageTransition1.json` <a href=\"https://github.com/uzh/lit-tutorial/tree/master/chapter2/T2.1\" class=\"underlined\" target=\"_blank\">here</a>.<br><br>One central utility of **pageTransitions** is *branch storylines*. Using multiple `pageTransitions.json` files gives the player multiple choices in how they progress through a storyline---or (equally importantly) it gives them the *feeling* that they are making choices, even if, in *Marugoto* terms, they are not. Either way, if you are creating branch storylines, you'll need to organize your page folders into chapter folders so that there is a clear hierarchy of progression through the storyline(s) (We'll explain about hierarchy of folders in a few pages.). The more branches you create, the more complicated, but at the same time, you increase the replay value of your game.<br><br>One final principle: we have designed LiT so that it is impossible to go back in a game: a general rule, as expressed by one of our programmers in a meeting, was “as in life, no return!”. But there are ways around this: in this Tutorial, for example, we have always offered a “Back” option through adding a `pageTransition.json` file. But this will only work as long as there aren't tasks for the players to complete, or emails for them to receive. If there are, then quickly the “Back” function becomes unviable because the player gets into a closed loop from which there is no escape. (Much like creating a game, some might say...)<br><br>That's it for the basics of page transitions---but there are many variables you can introduced to complicate the experience for the player, and we'll come to these on the next page."
}
