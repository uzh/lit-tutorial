{
  "id": null,
  "numberOfColumns": 8,
  "offsetColumns": 2,
  "renderOrder": 1,
  "showInNotebook": false,
  "showInNotebookAt": null,
  "page": null,
  "markdownContent": "First some general points:</p><p>1. If you want to mimic the player being interrupted by a telephone call, or by someone saying something, then you can use the dialogue functionality. (The former imperialists among us insist on UK spelling; our developers talk about dialog boxes.)</p><p>2. Dialog in *Marugoto* functions as a layer on top of a normal page: effectively, it's like a pop-up box. This means that---unlike with a mail---there is no way for the player to avoid seeing a dialog box; and they can only exit the dialog by actively clicking on a button, which in itself creates all sorts of narrative possibilities.<br><br>So now to some technicalities. There are essentially two ways to use *Marugoto*'s dialog functionality. The key difference between the two is the **timing** of the dialog. The first way, which we'll discuss on this page, has the player (inadvertently) trigger the dialog themselves. (In the second way, the dialog will appear after a certain number of seconds have elapsed: our testing suggests that this creates a more invasive emotion in the player.)<br><br>To have the players trigger the dialog themselves, you essentially have to pull a little trick on them. First, you create two identically looking page folders: the way you name these folders is up to you, but we use the suffix D (look at the repository). Thus, when the player is at the end of, say, page T1.5, they will click to transition to the next page (which would logically be T1.6), but in fact they will be going to T1.5D---which is identical to T1.5 except that it includes a minimum of four extra files: a `dialog.json`, a `dialogSpeech.json`, a `character.json`, and as many `dialogResponse.json` files as you want (we'll come back to these on the next page). All this will create the illusion that a dialog has *interrupted* a page transition, whereas in fact the dialog *is* the new page.<br><br>Now to those additional files:</p><p>1. `dialog.json` functions as the backbone of the dialog pop-up and defines---similar to the `mail.json`---who is talking, when it'll appear and what the contents are. In this file, the variable *from* is filled with the path to the `character.json`; *openOnReceive* and *receiveAfter* you know from the mail; and *speech* is filled with the path to `dialogSpeech.json`.</p><p>2. `character.json` works in exactly the same way it does with mails (previous page).</p><p>3. What a person is saying in the dialog is defined by the contents of `dialogSpeech.json`. Similar to the textComponent, you simply write in *markdownContent*. But in some ways, the most important files are...</p><p>4. the `dialogResponse.json` file(s). These are the magic tools by which you get *out* of a dialog box; but before that, let's entice you *in*..."
}
